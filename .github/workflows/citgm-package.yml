name: CITGM Package

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to test'
        required: true
        type: string
      node-version:
        description: 'Node version to test'
        required: true
        type: string
        default: '20'
      os:
        description: 'Operating System'
        required: false
        type: choice
        default: 'ubuntu-latest'
        options:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
      mongodb:
        description: 'Mongodb'
        required: false
        type: boolean
        default: false
      redis:
        description: 'Redis'
        required: false
        type: boolean
        default: false
      kafka:
        description: 'Kafka'
        required: false
        type: boolean
        default: false
      elasticsearch:
        description: 'Elasticsearch'
        required: false
        type: boolean
        default: false
      mysql:
        description: 'Mysql'
        required: false
        type: boolean
        default: false
      postgres:
        description: 'Postgres'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      package:
        description: 'Package to test'
        required: true
        type: string
      node-version:
        description: 'Node version to test'
        required: true
        type: string
        default: '20'
      os:
        description: 'Operating System'
        required: false
        type: string
        default: 'ubuntu-latest'
      mongodb:
        description: 'Mongodb'
        required: false
        type: boolean
        default: false
      redis:
        description: 'Redis'
        required: false
        type: boolean
        default: false
      kafka:
        description: 'Kafka'
        required: false
        type: boolean
        default: false
      elasticsearch:
        description: 'Elasticsearch'
        required: false
        type: boolean
        default: false
      mysql:
        description: 'Mysql'
        required: false
        type: boolean
        default: false
      postgres:
        description: 'Postgres'
        required: false
        type: boolean
        default: false
      
jobs:
  core-plugins:
    name: CITGM
    runs-on: ${{inputs.os}}
    permissions:
      contents: read
    services:
      elasticsearch:
        image: ${{ (inputs.elasticsearch == 'true' || inputs.elasticsearch == true) && 'elasticsearch:8.3.2' || '' }}
        ports:
          - '9200:9200'
          - '9300:9300'
        env:
          xpack.security.enabled: false
          discovery.type: single-node
        options: >-
          --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10
      zookeeper:
        image: ${{ (inputs.kafka == 'true' || inputs.kafka == true) && 'confluentinc/cp-zookeeper:7.4.3' || '' }}
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - '2181:2181'
      kafka:
        image: ${{ (inputs.kafka == 'true' || inputs.kafka == true) && 'confluentinc/cp-kafka:7.4.3' || '' }}
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        ports:
          - '9092:9092'
        options: >-
          --link zookeeper
      postgres:
        image: ${{ (inputs.postgres == 'true' || inputs.postgres == true) && 'postgres:11-alpine' || '' }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - '5432:5432'
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
      mongo:
        image: ${{ (inputs.mongodb == 'true' || inputs.mongodb == true) && 'mongo:5' || '' }}
        ports:
          - '27017:27017'
      mysql:
        image: ${{ (inputs.mysql == 'true' || inputs.mysql == true) && 'mysql:8.0' || '' }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_DATABASE: mysql
        ports:
          - '3306:3306'
        options: >-
          --health-cmd="mysqladmin ping" --health-interval=10s
          --health-timeout=5s --health-retries=3
      redis:
        image: ${{ (inputs.redis == 'true' || inputs.redis == true) && 'redis:7' || '' }}
        ports:
          - '6379:6379'
        options: '--entrypoint redis-server'
      
    steps:
        - name: Check out Fastify
          uses: actions/checkout@v4
          with:
            persist-credentials: false

        - name: Use Node.js
          uses: actions/setup-node@v4
          with:
            node-version: ${{ inputs.node-version }}
            cache: 'npm'
            cache-dependency-path: package.json

        - name: Install Dependencies for Fastify
          run: |
            npm install --ignore-scripts
        - name: Npm Link Fastify
          run: |
            npm link
        - name: Determine repository URL of ${{inputs.package}}
          uses: actions/github-script@v7
          id: repository-url
          with:
            result-encoding: string
            script: |
              const response = await fetch('https://registry.npmjs.org/${{inputs.package}}')
              const data = await response.json()
              const repositoryUrl = data.repository.url
              const result = repositoryUrl.match( /.*\/([a-zA-Z0-9-_]+\/[a-zA-Z0-9-_]+)\.git/)[1]
              return result
        - name: Check out ${{inputs.package}}
          uses: actions/checkout@v4
          with:
            repository: ${{ steps.repository-url.outputs.result }}
            path: dependency
            persist-credentials: false
        - name: Install Dependencies for ${{inputs.package}}
          working-directory: dependency
          run: |
            npm install
        - name: Sym Link Fastify
          working-directory: dependency
          run: |
            npm link fastify
        - name: Postgres Setup
          if: ${{ (inputs.postgres == 'true' || inputs.postgres == true) }}
          working-directory: dependency
          run: >
            npm i node-gyp
  
            sudo apt-get install -yqq libpq-dev postgresql-client
  
            chmod 600 .pgpass
  
            PGPASSFILE=.pgpass psql -h localhost -p ${{
            job.services.postgres.ports[5432] }} -d postgres -c 'CREATE TABLE
            users(id serial PRIMARY KEY, username VARCHAR (50) NOT NULL);' -U
            postgres
        - name: Run Tests of ${{inputs.package}}
          working-directory: dependency
          run: |
            npm test
